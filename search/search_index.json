{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p><pre><code>$ grep \"snippets\" ~/s-shifat/projects/\n./automation/quick_fix.sh\n./utils/parse_data.py\n./scripts/dev_shortcuts.sh\n./git/alias_config.sh\n./latex/templates/report.tex\n./snippets/\n</code></pre> Hi, You've landed on my code dumping place. It exists because of these recurring thoughts:</p> <pre><code>\"Oh! this thing again, and I forgot how I resolved it.\"\n\"I'll probably need this thing later.\"\n</code></pre> <p>Whether it\u2019s data science, environment fixes, or system tweaks, whenever I figure something out that might save me alot-of-google-searching in the future, I drop it here. </p> <p>\ud83d\udcbb What\u2019s inside?</p> <ul> <li>Data Science Stuff (mostly .py)</li> <li>Automation, utility scripts, environment setups (.sh, .py)</li> <li>Git configurations &amp; aliases (.sh, .gitconfig)</li> <li>LaTeX templates for reports &amp; papers (.tex)</li> <li>Code snippets for quick reference (.md, .py)</li> <li>and some other random stuff.</li> </ul> <p>If you find something useful, feel free to grab it.</p> <p>Happy coding! \ud83d\ude80</p>","tags":[]},{"location":"LaTeX/add-pdf-pages/","title":"Add Pdf Pages to a document","text":"<p>To include pages from a pdf to a document you can do:</p> <pre><code>\\usepackage{pdfpages} % To include PDF pages\n\n\\begin{document}\n\n...\n\n\\includepdf[pages=-]{yourfile.pdf} % The `pages=-` option includes all pages from the PDF\n\n\n\\end{document}\n</code></pre>","tags":[]},{"location":"LaTeX/assignments/math-related/","title":"Math / Engineering Related assignment Templates","text":"","tags":[]},{"location":"LaTeX/assignments/math-related/#bare-minimum","title":"Bare Minimum","text":"<p>Latex \\(\\rightarrow\\) Math Engineering home works / assignment starter</p> <pre><code>% %%%%%%%%%% P R E A M B L E %%%%%%%%%% \n\\documentclass[12pt,letterpaper, onecolumn]{exam}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{siunitx}\n\\usepackage[lmargin=71pt, tmargin=1.2in]{geometry}  %For centering solution box\n\\usepackage{enumerate}\n\\usepackage{array}\n\n\n\\lhead{CIV330\\\\}\n\\rhead{ID123456\\\\}\n% \\chead{\\hline} % Un-comment to draw line below header\n\\thispagestyle{empty}   %For removing header/footer from page 1\n\n% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n\n\\begin{document}\n\n% {{{ Nice Title Heading\n\n\\begingroup  \n    \\centering\n    \\LARGE CIV-330: Fluid Mechanics Lecture\\\\\n    \\LARGE Home Work: 1\\\\[0.5em]\n    \\large \\today\\\\[0.5em]\n    \\large Your Name\\par\n    \\large ID123456\\par\n    \\large Section 1 | Spring 2025\\par\n\\endgroup\n\\rule{\\textwidth}{0.4pt}\n\\pointsdroppedatright   %Self-explanatory\n\\printanswers\n\\renewcommand{\\solutiontitle}{\\noindent\\textbf{Solution:}\\enspace}   %Replace \"Ans:\" with starting keyword in solution box\n\n% }}}\n\n\\begin{questions}\n\n\n% {{{ Problem-1\n\n    % Question\n    \\question[] Calculate the density, specific weight, and weight of one liter of\npetrol of specific gravity 0.7.\n        \\begin{enumerate}[I.]\n            \\item Density?\n            \\item Specific weight?\n            \\item Weight?\n        \\end{enumerate}\n    % \\droppoints\n\n    % Solution\n    \\begin{solution}\n\n        Given,\n\n        Volume of petrol, $V = \\qty{1}{\\liter}$\n\n        Specific gravity of petrol, $S_l = 0.7$\n\n        Know Fluid properties:\n\n        Formula for Specific Gravity:\n            \\[\n                % Left Part\n                \\begin{aligned}\n                    &amp;~ S_l = \\frac{\\rho_l}{\\rho_w} \\\\\n                    \\Rightarrow&amp;~ \\rho_l = S_l \\times \\rho_w \\\\\n                    \\Rightarrow&amp;~ \\rho_l = 0.7 \\times \\qty{1000}{kg/m^3} \\\\\n                    \\therefore&amp;~ \\rho_l = \\qty{700}{kg/m^3}\n                \\end{aligned}\n                % Middle: Vertical Line\n                \\quad \\hspace{2cm} \\left\\vert\\quad\n                % Right Part\n                \\begin{aligned}\n                    &amp;~\\text{Here, }\\\\\n                    &amp;~\\text{Specific Gravity, }S_l = 0.7 \\\\\n                    &amp;~\\text{Density of water, }\\rho_w = \\qty{1000}{kg/m^3} \\\\\n                    &amp;~\\text{Density of petrol, }\\rho_l = \\text{?} \\\\\n                \\end{aligned}\n                \\right.\n            \\]\n\n    \\end{solution}\n\n% Problem-1 }}}\n\n\n\n\\end{questions}\n\\end{document}\n</code></pre> <p>OutPut: </p> <p></p>","tags":[]},{"location":"git/misc/","title":"Set a separate ssh key for one or more repo","text":"<p>While adding your machine to github via ssh, we followed github's guide line</p> <p>However, we can also set up one or more ssh keys for one or more repos. </p> <p>This can be handy in different scenarios. For example, say for the default setup I have generated ssh key with a passkey. So, for every push/pull action I have to authenticate using that passkey. Now I have a specific repository where I don't want this behavior, rather don't use any passkey at all. To achieve this we can do this:</p> <p>Run:</p> <pre><code>ssh-keygen -t ed25519 -f ~/.ssh/id_newID -N \"\"\n</code></pre> <ul> <li>This creates a new key (<code>id_newID</code>) with no passphrase.</li> <li>The private key is stored in <code>~/.ssh/id_newID</code>.</li> <li>The public key is stored in <code>~/.ssh/id_newID.pub</code>. </li> </ul> <p>Now, to <code>push</code> / <code>pull</code> do:</p> <pre><code>GIT_SSH_COMMAND=\"ssh -i ~/.ssh/id_newID\" git pull\n</code></pre> <p>To parsist this behavior, in the repo, do: <pre><code>git config core.sshCommand \"ssh -i ~/.ssh/id_newID\"\n</code></pre></p>","tags":[]},{"location":"python/datascience/ds_starter/","title":"Data Science Starter Snippets","text":"","tags":[]},{"location":"python/datascience/ds_starter/#preamble-1-quick-start-1","title":"Preamble-1 / Quick Start 1","text":"<p>A quick start or a preamble to data science projects. I have written my own matplotlib stylesheet, roughtly following the guidelines for scientific publications. To edit it, simply download the stylesheet in the same directory as the notebook/script file you're working (otherwise use absolute path) on and use that instead \\(\\rightarrow\\) <code>plt.style.use(\"./s_shifat_mpl_stylesheet.mplstyle\")</code>.</p> <p>Note: Nice thing about <code>plt.style.use()</code> is, it can be  mixed  with other built-in (outputs of  <code>plt.style.available</code> ) or custom styles chronologically as well using a list.</p> <pre><code># %%\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n# some nice aesthetics\nplt.style.use(\n    \"https://gist.githubusercontent.com/s-shifat/5f35e9d53d41a3195a8a86885f989fa1/\"\n    \"raw/e0005b8b0965c819510d719896baf8aa2faec914/s_shifat_mpl_stylesheet.mplstyle\"\n)\n\n# mpl.use(\"nbagg\")  # interactive backend\n\n# %%\nDATA_PATH = \"./data.csv\"\ndf = pd.read_csv(DATA_PATH)\ndf\n\n# %%\ndf.info()\n</code></pre>","tags":[]},{"location":"python/datascience/ds_starter/#preamble-2-quick-start-2","title":"Preamble-2 / Quick Start 2","text":"<p>The above example keeps the initial plot aesthetics away from the code to reduce clutter a bit. However, to control plot aesthetics right from your code \\(\\rightarrow\\)</p> <pre><code># %%\nimport numpy as np\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n# some plot aesthetics\nmpl.rcParams.update({\n    \"text.usetex\": False,\n    \"font.family\": \"serif\",\n    \"font.serif\": [\"Times New Roman\", \"Computer Modern\"],\n    \"axes.titlesize\": 14,\n    \"axes.labelsize\": 12,\n    \"legend.fontsize\": 12,\n    \"xtick.labelsize\": 12,\n    \"xtick.direction\": \"out\",\n    \"ytick.labelsize\": 12,\n    \"ytick.direction\": \"out\",\n    \"figure.figsize\": (8, 6),\n})\n\n# mpl.use(\"nbagg\")  # interactive backend\n\n\n# %%\nDATA_PATH = \"./data.csv\"\ndf = pd.read_csv(DATA_PATH)\ndf\n\n# %%\ndf.info()\n</code></pre>","tags":[]},{"location":"python/plotting/fonts_management/","title":"add_fonts","text":"<pre><code># A pseudo scenario\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 100, 0.2)\ny = x**2\n\nfig, ax = plt.subplots(figsize=(6, 4))\nax.plot(x, y)\n</code></pre>","tags":[]},{"location":"python/plotting/fonts_management/#option1-fonts-installed-and-setup-in-global-scope","title":"Option1: Fonts installed and Setup in global scope","text":"<p>If a particular font is already installed in the development machine/system and for the plotting you want to use it in each plot (ie. global scope)</p> <pre><code>plt.rcParams['font.family'] = 'Times New Roman'\n</code></pre>","tags":[]},{"location":"python/plotting/fonts_management/#option2-fonts-installed-and-setup-plot-element-specific","title":"Option2: Fonts installed and Setup Plot Element specific","text":"<p>Tip: Most of the text contatining elements have <code>font</code> or similar keyword argument <pre><code>ax.set_title('x vs y', font='Times New Roman')  # Title\nax.set_xlabel('x m/s', font='Arial')  # Label\nax.set_xticks(\n    np.arange(0, 100, 20),\n    lables=np.arange(0, 100, 20),\n    font='Source Code Pro'\n)  # tick labels\n</code></pre></p>","tags":[]},{"location":"python/plotting/fonts_management/#list-the-font-names-available-to-matplotlib","title":"List The font names available to matplotlib","text":"<p>from StackOverflow <pre><code>from matplotlib import font_manager\n</code></pre></p> <pre><code>sorted(font_manager.get_font_names())\n</code></pre>","tags":[]},{"location":"python/plotting/fonts_management/#load-a-font-file-without-systemwide-installation","title":"Load a font file without systemwide installation","text":"<pre><code>from matplotlib import font_manager\n</code></pre> <pre><code>font_path = \"path/to/font.ttf\"  \nfont_props = font_manager.FontProperties(fname=font_path)\n\nax.plot(x, y)\n\n# Apply the custom font\nax.set_title(\"x vs y\", fontproperties=font_props, fontsize=14)\nax.set_xlabel(\"X-axis Label\", fontproperties=font_props)\nax.set_ylabel(\"Y-axis Label\", fontproperties=font_props)\nax.legend(prop=font_props)\n</code></pre>","tags":[]},{"location":"python/plotting/fonts_management/#setup-font-size","title":"Setup Font Size","text":"<p>setup font size of different components in global scope. More at: Customizing Matplotlib with Style sheets and rcParams</p> <pre><code>import matplotlib as mpl\n</code></pre> <pre><code># Set LaTeX-style font\nmpl.rcParams.update({\n    \"text.usetex\": True,\n    \"font.family\": \"serif\",\n    \"font.serif\": [\"Computer Modern\"],\n    \"axes.labelsize\": 12,\n    \"axes.titlesize\": 14,\n    \"legend.fontsize\": 12,\n    \"xtick.labelsize\": 12,\n    \"ytick.labelsize\": 12,\n})\n</code></pre>","tags":[]},{"location":"python/plotting/misc/","title":"Change Backend / Use figure toolbars","text":"<p>Use matplotlib figure toolbars in jupyter notebook environment.</p> <p><pre><code>matplotlib.use('nbagg')  # For Figure Tool bars embedded in jupyter output cell\n</code></pre> Other backends:</p> <p><pre><code>matplotlib.use('TkAgg')\n# or\nmatplotlib.use('Qt5Agg')\n</code></pre> There are also few other cool backends built-in, which can be divided into 2 categories: Interactive and Non-interactive.</p> <p>To see what's available:</p> <pre><code>from matplotlib.backends import backend_registry, BackendFilter\nprint(\"Interactives:\", backend_registry.list_builtin(BackendFilter.INTERACTIVE))\nprint(\"Non-interactives:\", backend_registry.list_builtin(BackendFilter.NON_INTERACTIVE))\n</code></pre>","tags":[]},{"location":"python/plotting/misc/#inline-commandline-plotting","title":"Inline / commandline plotting","text":"","tags":[]},{"location":"python/plotting/misc/#inline-interactive","title":"Inline + Interactive","text":"<p>While using <code>ipython</code> and a terminal that supports image rendering like <code>kitty</code> magic commands also work:</p> <p>Technically this should work in jupyter notebooks too. <pre><code>%matplotlib tk\n#or\n%matplotlib qt\n</code></pre></p>","tags":[]},{"location":"python/plotting/misc/#kitty-and-matplotlib","title":"Kitty and matplotlib","text":"","tags":[]},{"location":"python/plotting/misc/#inline-non-interactive","title":"Inline + Non-interactive","text":"<p>I am currently using <code>kitty</code> terminal. To use kitty as backend for python's matplotlib library. use the following:</p> <ol> <li> <p>Install it:</p> <pre><code>pip install --user matplotlib-backend-kitty\n</code></pre> </li> <li> <p>Use it (say in <code>ipython</code> or vanila <code>python</code>):     <pre><code>import matplotlib\nmatplotlib.use('module://matplotlib-backend-kitty')\nimport matplotlib.pyplot as plt\n</code></pre> .  More on this link.</p> </li> </ol>","tags":[]},{"location":"python/plotting/misc/#use-latex-in-global-scope","title":"Use Latex in global scope","text":"<p>It will display numbers in latex format and also the formula.</p> <pre><code>plt.rcParams['text.usetex'] = True\n</code></pre>","tags":[]},{"location":"python/plotting/misc/#format-dates-in-axis","title":"Format Dates in axis","text":"<p>Let's say I only want to show hours and minutes in the time axis (x-axis)</p> <pre><code>from matplotlib.dates import DateFormatter\n</code></pre> <pre><code>time_format = DateFormatter(\"%H:%M\")\n\nax.xaxis.set_major_formatter(time_format)\n</code></pre> <p>python date string formats (I like to call it python date format table) are found here</p>","tags":[]},{"location":"python/plotting/notebooks/most_frequent_mpl_snippets/","title":"Most frequent mpl snippets","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# Some nice styling\nplt.style.use(\"seaborn-v0_8\")\nmpl.rcParams.update({\n    \"font.family\": \"Times New Roman\",\n    \"axes.titlesize\": 18,\n    \"axes.labelsize\": 14,\n    \"xtick.labelsize\": 12,\n    \"ytick.labelsize\": 12,\n})\n</pre> import numpy as np import matplotlib as mpl import matplotlib.pyplot as plt  # Some nice styling plt.style.use(\"seaborn-v0_8\") mpl.rcParams.update({     \"font.family\": \"Times New Roman\",     \"axes.titlesize\": 18,     \"axes.labelsize\": 14,     \"xtick.labelsize\": 12,     \"ytick.labelsize\": 12, }) In\u00a0[2]: Copied! <pre>x = np.arange(-4*np.pi, 4*np.pi + 0.01, 0.01)\ny = x**3 * np.sin(x) * np.cos(x)\n\nx_left, x_right, interval = -2*np.pi, 2*np.pi, np.deg2rad(90)\ncustom_xticks = np.arange(x_left, x_right + interval, interval)\ncustom_xticks_labels = np.int16(np.rint(np.degrees(custom_xticks)))\n</pre> x = np.arange(-4*np.pi, 4*np.pi + 0.01, 0.01) y = x**3 * np.sin(x) * np.cos(x)  x_left, x_right, interval = -2*np.pi, 2*np.pi, np.deg2rad(90) custom_xticks = np.arange(x_left, x_right + interval, interval) custom_xticks_labels = np.int16(np.rint(np.degrees(custom_xticks))) In\u00a0[3]: Copied! <pre>fig_size = (8.5, 6)\nfig, ax = plt.subplots(figsize=fig_size)\n\nax.plot(x, y)\n\nax.set(\n    title= 'My Title',\n\n    xlabel = '$\\\\leftarrow X \\\\rightarrow$',\n    xlim = (x_left, x_right),\n    xscale = 'linear', # or 'log', &lt;function&gt; etc.\n\n    ylabel = '$\\\\leftarrow Y \\\\rightarrow$',\n    ylim = (-100, 50),\n)\n\n\nfig.set_layout_engine('constrained')\n# fig.savefig('myplot.png', dpi=600)\n\nplt.show()\n</pre> fig_size = (8.5, 6) fig, ax = plt.subplots(figsize=fig_size)  ax.plot(x, y)  ax.set(     title= 'My Title',      xlabel = '$\\\\leftarrow X \\\\rightarrow$',     xlim = (x_left, x_right),     xscale = 'linear', # or 'log',  etc.      ylabel = '$\\\\leftarrow Y \\\\rightarrow$',     ylim = (-100, 50), )   fig.set_layout_engine('constrained') # fig.savefig('myplot.png', dpi=600)  plt.show() <p>or use a dictionary  with the valid key word arguments $\\rightarrow$</p> <pre>ax_properties = {\n    \"title\": \"My title\",\n    \"xlabel\": \"x\",\n    \"ylabel\": \"y\",\n    # etc...\n}\nax.set(**ax_properties)\n</pre> In\u00a0[4]: Copied! <pre>plt.plot(x, y)\n\n# simplest\nplt.xticks(rotation=45)\n\n# or \nax.tick_params(axis='x', labelrotation=45)\n</pre> plt.plot(x, y)  # simplest plt.xticks(rotation=45)  # or  ax.tick_params(axis='x', labelrotation=45) In\u00a0[5]: Copied! <pre>plt.plot(x, y)\nax  = plt.gca()\n\nax.set_xticks(custom_xticks, custom_xticks_labels, rotation=90)\n\nplt.show()\n</pre> plt.plot(x, y) ax  = plt.gca()  ax.set_xticks(custom_xticks, custom_xticks_labels, rotation=90)  plt.show()"},{"location":"python/plotting/notebooks/most_frequent_mpl_snippets/#preamble","title":"Preamble\u00b6","text":""},{"location":"python/plotting/notebooks/most_frequent_mpl_snippets/#quick-plot-set-the-basic-plotting-elements-all-at-once","title":"Quick Plot: set the basic plotting elements all at once\u00b6","text":"<p>To see what other parameters can be set. visit <code>matplotlib.axes.Axes.set</code></p>"},{"location":"python/plotting/notebooks/most_frequent_mpl_snippets/#add-rotation-to-tick-labels","title":"Add rotation to tick labels\u00b6","text":"<p>Stolen from StackOverflow</p>"},{"location":"python/plotting/notebooks/most_frequent_mpl_snippets/#rotating-xtick-labels-wihtout-custom-ticks-and-labels","title":"Rotating xtick labels wihtout custom ticks and labels\u00b6","text":""},{"location":"python/plotting/notebooks/most_frequent_mpl_snippets/#rotating-xtick-labels-with-custom-ticks-and-labels","title":"Rotating xtick labels with custom ticks and labels\u00b6","text":""}]}